version: "3.9"

networks:
  redpanda_network:
    driver: bridge

services:
  bootstrap:
    image: bootstrap
    container_name: bootstrap-service
    build:
      no_cache: true
      context: .
      dockerfile: Dockerfiles/Bootstrap.Dockerfile
      target: dev
      tags:
        - "bootstrap"
    env_file:
      - app/src/config/.env
    networks:
      - redpanda_network
    depends_on:
      - mongo
      - redis
      - redpanda
      - console

  urls-consumer:
    image: urls-consumer
    # container_name: urls-consumer-service
    restart: always
    deploy:
      replicas: 3 # <<<--- number of instances
    build:
      no_cache: true
      context: .
      dockerfile: Dockerfiles/URLsConsumer.Dockerfile
      target: dev
      tags:
        - "urls-consumer"
    env_file:
      - app/src/config/.env
    networks:
      - redpanda_network
    depends_on:
      - htmls-consumer

  htmls-consumer:
    image: htmls-consumer
    # container_name: htmls-consumer-service # <<<--- must remove so it would be unique
    deploy:
      replicas: 2 # <<<--- number of instances
    restart: always
    build:
      no_cache: true
      context: .
      dockerfile: Dockerfiles/HTMLsConsumer.Dockerfile
      target: dev
      tags:
        - "htmls-consumer"
    env_file:
      - app/src/config/.env
    networks:
      - redpanda_network
    depends_on:
      - words-consumer

  words-consumer:
    image: words-consumer
    container_name: words-consumer-service
    restart: always
    build:
      no_cache: true
      context: .
      dockerfile: Dockerfiles/WordsConsumer.Dockerfile
      target: dev
      tags:
        - "words-consumer"
    env_file:
      - app/src/config/.env
    networks:
      - redpanda_network
    depends_on:
      - persistdb-consumer

  persistdb-consumer:
    image: persistdb-consumer
    container_name: persistdb-consumer-service
    restart: always
    build:
      no_cache: true
      context: .
      dockerfile: Dockerfiles/PersistDBConsumer.Dockerfile
      target: dev
      tags:
        - "persistdb-consumer"
    env_file:
      - app/src/config/.env
    networks:
      - redpanda_network
    depends_on:
      - mongo
      - redis
      - redpanda
      - console

  mongo:
    image: mongo
    container_name: mongodb-database
    restart: always
    networks:
      - redpanda_network
    ports:
      - 27017:27017

  redis:
    container_name: redis-cache
    image: redis/redis-stack
    restart: always
    ports:
      - "6379:6379"
      - "8001:8001"
    networks:
      - redpanda_network
    depends_on:
      - mongo

  redpanda:
    container_name: redpanda-kafka-broker
    networks:
      - redpanda_network
    image: docker.redpanda.com/redpandadata/redpanda:v23.2.22
    command:
      - redpanda start
      - --smp 1
      - --overprovisioned
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      - --mode dev-container
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
      - 9092:9092
    healthcheck:
      test:
        ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      - redis

  console:
    container_name: redpanda-kafka-ui
    networks:
      - redpanda_network
    image: redpandadata/console:v2.3.8
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        connect:
          enabled: true
          clusters:
            - name: local-connect-cluster
              url: http://connect:8083
    ports:
      - 8080:8080
    depends_on:
      - redpanda
